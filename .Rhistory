abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 2, col = "salmon")
points(x[1:19], y[1 : 19], pch = 21, col = "black", bg = "lightblue", cex = 2) #automatic
points(x[20:32], y[20:32], pch = 21, col = "black", bg = "salmon", cex = 2) #manual
legend(3, c('automatic','manual'), pch = "sSvV", col = c('lightblue', 'salmon'))
summary(fit)$coef
leg.txt <- c("Setosa     Petals", "Setosa     Sepals",
"Versicolor Petals", "Versicolor Sepals")
y.leg <- c(4.5, 3, 2.1, 1.4, .7)
cexv  <- c(1.2, 1, 4/5, 2/3, 1/2)
matplot(c(1, 8), c(0, 4.5), type = "n", xlab = "Length", ylab = "Width",
main = "Petal and Sepal Dimensions in Iris Blossoms")
for (i in seq(cexv)) {
text  (1, y.leg[i] - 0.1, paste("cex=", formatC(cexv[i])), cex = 0.8, adj = 0)
legend(3, y.leg[i], leg.txt, pch = "sSvV", col = c(1, 3), cex = cexv[i])
}
n <- nrow(mtcars); t <- mtcars$am; x <- mtcars$wt; y <- mtcars$mpg;
plot(x, y, type = "n", frame = FALSE, xlab = "Weight (lb/1000)", ylab = "MPG", main = "MPG vs. wt, by transmission type")
fit <- lm(y ~ x*factor(t))
abline(coef(fit)[1], coef(fit)[2], lwd = 2, col = "lightblue")
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 2, col = "salmon")
points(x[1:19], y[1 : 19], pch = 21, col = "black", bg = "lightblue", cex = 2) #automatic
points(x[20:32], y[20:32], pch = 21, col = "black", bg = "salmon", cex = 2) #manual
legend(4, 'am', c('automatic','manual'), pch = "sSvV", col = c('lightblue', 'salmon'))
summary(fit)$coef
n <- nrow(mtcars); t <- mtcars$am; x <- mtcars$wt; y <- mtcars$mpg;
plot(x, y, type = "n", frame = FALSE, xlab = "Weight (lb/1000)", ylab = "MPG", main = "MPG vs. wt, by transmission type")
fit <- lm(y ~ x*factor(t))
abline(coef(fit)[1], coef(fit)[2], lwd = 2, col = "lightblue")
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 2, col = "salmon")
points(x[1:19], y[1 : 19], pch = 21, col = "black", bg = "lightblue", cex = 2) #automatic
points(x[20:32], y[20:32], pch = 21, col = "black", bg = "salmon", cex = 2) #manual
legend(4, 25, c('automatic','manual'), pch = "sSvV", col = c('lightblue', 'salmon'))
summary(fit)$coef
n <- nrow(mtcars); t <- mtcars$am; x <- mtcars$wt; y <- mtcars$mpg;
plot(x, y, type = "n", frame = FALSE, xlab = "Weight (lb/1000)", ylab = "MPG", main = "MPG vs. wt, by transmission type")
fit <- lm(y ~ x*factor(t))
abline(coef(fit)[1], coef(fit)[2], lwd = 2, col = "lightblue")
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 2, col = "salmon")
points(x[1:19], y[1 : 19], pch = 21, col = "black", bg = "lightblue", cex = 2) #automatic
points(x[20:32], y[20:32], pch = 21, col = "black", bg = "salmon", cex = 2) #manual
legend(4, 25, c('automatic','manual'), col = c('lightblue', 'salmon'))
summary(fit)$coef
n <- nrow(mtcars); t <- mtcars$am; x <- mtcars$wt; y <- mtcars$mpg;
plot(x, y, type = "n", frame = FALSE, xlab = "Weight (lb/1000)", ylab = "MPG", main = "MPG vs. wt, by transmission type")
fit <- lm(y ~ x*factor(t))
abline(coef(fit)[1], coef(fit)[2], lwd = 2, col = "lightblue")
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 2, col = "salmon")
points(x[1:19], y[1 : 19], pch = 21, col = "black", bg = "lightblue", cex = 2) #automatic
points(x[20:32], y[20:32], pch = 21, col = "black", bg = "salmon", cex = 2) #manual
legend(4, 25, c('automatic','manual'), pch = 1, col = c('lightblue', 'salmon'))
summary(fit)$coef
n <- nrow(mtcars); t <- mtcars$am; x <- mtcars$wt; y <- mtcars$mpg;
plot(x, y, type = "n", frame = FALSE, xlab = "Weight (lb/1000)", ylab = "MPG", main = "MPG vs. wt, by transmission type")
fit <- lm(y ~ x*factor(t))
abline(coef(fit)[1], coef(fit)[2], lwd = 2, col = "lightblue")
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 2, col = "salmon")
points(x[1:19], y[1 : 19], pch = 21, col = "black", bg = "lightblue", cex = 2) #automatic
points(x[20:32], y[20:32], pch = 21, col = "black", bg = "salmon", cex = 2) #manual
legend(4, 25, c('automatic','manual'), pch = 2, col = c('lightblue', 'salmon'))
summary(fit)$coef
n <- nrow(mtcars); t <- mtcars$am; x <- mtcars$wt; y <- mtcars$mpg;
plot(x, y, type = "n", frame = FALSE, xlab = "Weight (lb/1000)", ylab = "MPG", main = "MPG vs. wt, by transmission type")
fit <- lm(y ~ x*factor(t))
abline(coef(fit)[1], coef(fit)[2], lwd = 2, col = "lightblue")
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 2, col = "salmon")
points(x[1:19], y[1 : 19], pch = 21, col = "black", bg = "lightblue", cex = 2) #automatic
points(x[20:32], y[20:32], pch = 21, col = "black", bg = "salmon", cex = 2) #manual
legend(4, 25, c('automatic','manual'), pch = 20, col = c('lightblue', 'salmon'))
summary(fit)$coef
n <- nrow(mtcars); t <- mtcars$am; x <- mtcars$wt; y <- mtcars$mpg;
plot(x, y, type = "n", frame = FALSE, xlab = "Weight (lb/1000)", ylab = "MPG", main = "MPG vs. wt, by transmission type")
fit <- lm(y ~ x*factor(t))
abline(coef(fit)[1], coef(fit)[2], lwd = 2, col = "lightblue")
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 2, col = "salmon")
points(x[1:19], y[1 : 19], pch = 21, col = "black", bg = "lightblue", cex = 2) #automatic
points(x[20:32], y[20:32], pch = 21, col = "black", bg = "salmon", cex = 2) #manual
legend(4.5, 30, c('automatic','manual'), pch = 20, col = c('lightblue', 'salmon'))
summary(fit)$coef
library(UsingR); library(dplyr); data(mtcars)
str(mtcars)
mtcars <- arrange(mtcars,am); mtcars <- mutate(mtcars, am = as.factor(am), vs = as.factor(vs), cyl = as.factor(cyl), carb = as.factor(carb), gear = as.factor(gear))
pairs(mtcars)
library(UsingR); library(dplyr); data(mtcars)
plot(fit$residuals)
?subset
?tapply
?which
library(MASS)
?shuttle
fit <- glm(use ~ wind, data = shuttle, family = "binomial")
summary(fit)
exp(-.25131)
exp(-.0318)
fit <- glm(use ~ wind + magn, data = shuttle, family = "binomial")
summary(fit)
exp(-.03201)
fit <- glm(I(1-use) ~ wind, data = shuttle, family = "binomial")
data(InsectSprays)
str(InsectSprays)
fit <- glm(count ~ spray, data = InsectSprays, family = "poisson")
summary(fit)
exp(2.67)
exp(2.674-0.056)
exp(2.67)/exp(2.674-0.056)
exp(0.05588)
exp(-0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot = 0
knots = 0
rm(knot)
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)yhat<-predict(lm(y~xMat-1))
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat-1))
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2) lines(x,yhat,col="red",lwd=2)
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
fit <- lm(y~xMat-1)
summary(fit)
xMat
library(diamonds)
data(diamonds)
library(datasets)
data(diamonds)
library(ggplot2)
data(diamonds)
dim(diamonds)
str(diamonds)
summary(diamonds)
hist(diamonds, price)
hist(diamonds$price)
hist(diamonds$price)
length(diamonds[diamonds$price<500])
length(diamonds[diamonds$price<500],)
length(diamonds[diamonds$price<500,])
dim(diamonds[diamonds$price<500,])
dim(diamonds[diamonds$price<250,])
dim(diamonds[diamonds$price>15000,])
dim(diamonds[diamonds$price>=15000,])
qplot(price, data=diamonds)
qplot(price, data=diamonds, xlim=c(0,500))
qplot(price, data=diamonds, xlim=c(0,1000))
qplot(price, data=diamonds, xlim=c(0,1000), binwidth = 50)
qplot(price, data=diamonds, xlim=c(0,2000), binwidth = 50)
qplot(price, data=diamonds, xlim=c(0,2000), binwidth = 100)
getwd()
qplot(price, data=diamonds, xlim=c(0,2000), binwidth = 100, breaks = seq(0,2000,100))
qplot(price, data=diamonds, breaks = seq(0,2000,100))
qplot(price, data=diamonds, breaks = seq(0,2000,50))
qplot(price, data=diamonds, breaks = seq(0,2000,75))
qplot(price, data=diamonds, breaks = seq(0,2000,50))
qplot(price, data=diamonds, breaks = seq(0,2000,50), binwidth(50))
qplot(price, data=diamonds, breaks = seq(0,2000,50), binwidth=50)
qplot(price, data=diamonds, breaks = seq(0,2000,50), binwidth=1)
qplot(price, data=diamonds, xlim = c(0,2000), binwidth=1)
qplot(price, data=diamonds, facet=cut)
ggplot(diamonds, aes(price, facet= cut))+gemo_histogram()
ggplot(diamonds, aes(price, facet= cut))+geom_histogram()
?ggplot
ggplot(diamonds, aes(price)+facet_grid(cut)+geom_histogram()
ggplot(diamonds, aes(price))+facet_grid(cut)+geom_histogram()
ggplot(diamonds, aes(price))+facet(cut)+geom_histogram()
ggplot(diamonds, aes(price))+facet(cut~.)+geom_histogram()
ggplot(diamonds, aes(price))+facet_grid(cut~.)+geom_histogram()
ggplot(diamonds, aes(price))+facet_grid(cut~., scales="free_y")+geom_histogram()
diamond$cut[diamond$price==max(diamond$price)]
diamonds$cut[diamonds$price==max(diamonds$price)]
diamonds$cut[diamonds$price==min(diamonds$price)]
median(diamonds$price)
tapply(diamonds$price, diamonds$cut, median)
median(diamonds$price[diamonds$price=='Ideal'])
median(diamonds$price[diamonds$cut=='Ideal'])
min(diamonds$price)
diamonds$cut[diamonds$price==326]
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales="free_y")
str(diamonds)
diamonds$ppc = diamonds$price/diamonds$carat
qplot(x = ppc, data = diamonds) + facet_wrap(~cut, scales="free_y")
qplot(x = ppc, data = diamonds, binwidth=50) + facet_wrap(~cut, scales="free_y")+scale_x_log10()
qplot(x = ppc, data = diamonds, binwidth=1) + facet_wrap(~cut, scales="free_y")+scale_x_log10()
qplot(x = ppc, data = diamonds, binwidth=.01) + facet_wrap(~cut, scales="free_y")+scale_x_log10()
library(caret)
?createFolds
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=0.75)[[1]]
training=adData[inTrain,]
testing=adData[-inTrain,]
names(training)
names(training[,58:70])
names(training[,57:69])
names(training[,58:69])
preObj7 = preProcess(training[,58:69], method="pca", pcaComp=7)
train7 = predict(preObj7,training[,58:69])
modelFit7 = train(training$type ~ ., method = "glm", data = train7)
modelFit7 = train(training$diagnosis ~ ., method = "glm", data = train7)
confusionMatrix(training$diagnosis,predict(modelFit,train7))
confusionMatrix(training$diagnosis,predict(modelFit7,train7))
summary(modelFit7)
abs(cor(training[,58:69]))
train7
head(train7)
preObj7
summary(preObj7)
preObj7$std
?preProcess
preObj7 = preProcess(training[,58:69], method="pca", thresh = 0.8)
summary(preObj7)
preObj7
preObj7$numComp
preObj7$rotation
train7 = predict(preObj7,training[,58:69])
modelFit7 = train(training$diagnosis ~ ., method = "glm", data = train7)
summary(modelFit7)
summary(train7)
confusionMatrix(training$diagnosis,predict(modelFit7,train7))
modelFit7 = train(training$diagnosis ~ ., method = "glm", data = training[,58:69])
confusionMatrix(training$diagnosis,predict(modelFit7,training[,58:69]))
modelFit7 = train(training$diagnosis ~ ., method = "glm", data = training[,58:69])
summary(modelFit7)
confusionMatrix(training$diagnosis,predict(modelFit7,training[,58:69]))
set.seed(3433)
confusionMatrix(testing$diagnosis,predict(modelFit7,testing[,58:69]))
test7 = predict(preObj7,testing[,58:69])
modelFit7 = train(training$diagnosis ~ ., method = "glm", data = train7)
confusionMatrix(testing$diagnosis,predict(modelFit7,test7))
(92+1030)/(92+1030+126+227)
data(diamonds)
library(stats)
data(diamonds)
library(ggplot2)
suppressPackageStartupMessages
data(diamonds)
names(diamonds)
qplot(x =x, y = price, data = diamonds)
with(diamonds, test.cor(price,x))
?test.cor
with(diamonds, cor(price,x))
with(diamonds, cor(price,y))
with(diamonds, cor(price,z))
qplot(x = depth, y = price, data = diamonds)
qplot(x = depth, y = price, data = diamonds, alpha = 1/100)
qplot(x = depth, y = price, data = diamonds, alpha = 1/100) +
scale_x_discrete(breaks = seq(40,80,2))
qplot(x = depth, y = price, data = diamonds, alpha = 1/100) +
scale_x_continuous(breaks = seq(40,80,2))
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(breaks = seq(40,80,2))
qplot(x = depth, y = price, data = diamonds, alpha = 1/100) +
scale_x_continuous(breaks = seq(40,80,2))
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha = 1/100) +
scale_x_continuous(breaks = seq(40,80,2))
with(diamonds, cor(price,depth))
?quartile
?quartile()
ggplot(data = diamonds, aes(x = carat, y = price))
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
?quantile
ggplot(data = diamonds, aes(x = quantile(carat,0.99), y = quantile(price,0.99))) +
geom_point()
x = quantile(carat,0.99)
x = quantile(diamonds$carat,0.99)
x
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
dimaonds$volume = diamonds$x * diamonds$y * diamonds$z
diamonds$volume = diamonds$x * diamonds$y * diamonds$z
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point()
library(plyr)
count(diamonds$volume == 0)
detach("package:plyr", unload=TRUE)
cor(diamonds$price, diamonds$volume[diamonds$volume!=0 & diamonds$volume<800,])
cor(diamonds$price, diamonds$volume[diamonds$volume!=0 & diamonds$volume<800])
cor(diamonds$price[diamonds$volume!=0 & diamonds$volume<800], diamonds$volume[diamonds$volume!=0 & diamonds$volume<800])
d = diamonds[diamonds$volume!=0 & diamonds$volume<800,]
ggplot(data = diamonds, aes(x = volume, y = price)) +
geom_point()
ggplot(data = d, aes(x = volume, y = price)) +
geom_point()
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha = 1/100) +
geom_smooth(method='lm')
?geom_smooth()
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha = 1/100)
ggplot(data = d, aes(x = volume, y = price)) +
geom_point(alpha = 1/100) +
stat_smooth(method='lm')
library(dplyr)
diamondsByClarity = diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
q
diamondsByClarity = diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
str(diamonds)
diamondsByClarity = diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
install.packages(dplyr)
install.packages('dplyr')
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
diamondsByClarity = diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
diamondsByClarity = diamonds %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price) * 1.0,
min_price = min(price),
max_price = max(price),
n = n())
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
head(diamonds_mp_by_clarity)
ggplot(data = diamonds_mp_by_clarity, aes(x = clarity, y = mean_price)) +
geom_bar()
library(ggplot)
library(ggplot2)
library(gridExtra)
ggplot(data = diamonds_mp_by_clarity, aes(x = clarity, y = mean_price)) +
geom_bar()
?geom_bar
str(diamonds_mp_by_clarity)
ggplot(data = diamonds_mp_by_clarity, aes(x = clarity)) +
geom_bar()
ggplot(data = diamonds_mp_by_clarity, aes(x = clarity)) +
geom_bar(stat = mean_price)
ggplot(data = diamonds_mp_by_clarity, aes(x = clarity, y = mean_price)) +
geom_bar(stat='identity')
p1 = ggplot(data = diamonds_mp_by_clarity, aes(x = clarity, y = mean_price)) +
geom_bar(stat='identity')
p2 = ggplot(data = diamonds_mp_by_color, aes(x = color, y = mean_price)) +
geom_point(stat='identity')
grid.arrange(p1,p2, ncol = 2)
p2 = ggplot(data = diamonds_mp_by_color, aes(x = color, y = mean_price)) +
geom_bar(stat='identity')
grid.arrange(p1,p2, ncol = 2)
library(reshape2)
library(ggplot2)
data(diamonds)
d = subset(diamonds, carat <= as.numeric(quantile(diamonds$carat, 0.99) & ...
price <= as.numeric(quantile(diamonds$price, 0.99)))
d = subset(diamonds, carat <= as.numeric(quantile(diamonds$carat, 0.99) &
price <= as.numeric(quantile(diamonds$price, 0.99)))
)
d = subset(diamonds, carat <= as.numeric(quantile(diamonds$carat, 0.99)) &
price <= as.numeric(quantile(diamonds$price, 0.99)))
ggplot(aes(x=carat, y=price), data = d) +
geom_point()
ggplot(aes(x=carat, y=price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(dimaonds$price, 0.99))) +
geom_point()
ggplot(aes(x=carat, y=price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point()
ggplot(aes(x=carat, y=price), data = diamonds) +
stat_smooth(method='lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point()
ggplot(aes(x=carat, y=price), data = diamonds) +
stat_smooth(method='lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('blue'))
ggplot(aes(x=carat, y=price), data = diamonds) +
stat_smooth(method='lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(aes(fill = 'orange', color = 'black'))
ggplot(aes(x=carat, y=price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(aes(fill = 'orange', color = 'black')) +
stat_smooth(method = 'lm')
ggplot(aes(x=carat, y=price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(aes(fill = 'orange')) +
stat_smooth(method = 'lm')
ggplot(aes(x=carat, y=price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(colot = 'orange', alpha = 1/4) +
stat_smooth(method = 'lm')
ggplot(aes(x=carat, y=price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(colot = '#F79420', alpha = 1/4) +
stat_smooth(method = 'lm')
ggplot(aes(x=carat, y=price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = '#F79420', alpha = 1/4) +
stat_smooth(method = 'lm')
ggplot(aes(x=carat, y=price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = 'orange', alpha = 1/4) +
stat_smooth(method = 'lm')
library(GGally)
library(scales)
set.seed(20022012)
diamonds_samp = diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamonds_samp, params = c(shape = I('.'), outlier.shape - I('.')))
install.packages('memisc')
install.packages('MASS')
install.packages("MASS")
install.packages('MASS')
library(scales)
library(memisc)
qplot(x = quality, data = wines)
qplot(x = quality, data = wines)
library(ggplot2)
library(gridExtra)
library(GGally)
# Load the Data
wines = read.csv("wineQualityReds.csv", row.names=1)
#View some stats
dim(wines)
head(wines)
str(wines)
summary(wines)
for i in length(wines){
qplot(x = wines[i], data = wines)
}
for i in length(wines) {
qplot(x = wines[i], data = wines)
}
for i in 1:length(wines) {
qplot(x = wines[i], data = wines)
}
for (i in 1:length(wines)) {
qplot(x = wines[i], data = wines)
}
wines = read.csv("wineQualityReds.csv", row.names=1)
setwd('./Desktop/P4_RedWineEDA')
wines = read.csv("wineQualityReds.csv", row.names=1)
for (i in 1:length(wines)) {
qplot(x = wines[i], data = wines)
}
qplot(x = quality, data = wines)
qplot(x = alcohol, data = wines)
qplot(x = residual.sugar, data = wines)
qplot(x = fixed.acidity, data = wines)
qplot(x = volatile.acidity, data = wines)
qplot(x = citric.acid, data = wines)
qplot(x = pH, data = wines)
qplot(x = total.sulfur.dioxide, data = wines)
qplot(x = free.sulfur.dioxide, data = wines)
qplot(x = sulphates, data = wines)
qplot(x = chloride, data = wines)
qplot(x = density, data = wines)
qplot(x = quality, data = wines)
qplot(x = alcohol, data = wines)
qplot(x = residual.sugar, data = wines)
qplot(x = fixed.acidity, data = wines)
qplot(x = volatile.acidity, data = wines)
qplot(x = citric.acid, data = wines)
qplot(x = pH, data = wines)
qplot(x = total.sulfur.dioxide, data = wines)
qplot(x = free.sulfur.dioxide, data = wines)
qplot(x = sulphates, data = wines)
qplot(x = chlorides, data = wines)
qplot(x = density, data = wines)
ggplot(aes(x = alcohol, y = citric.acid, color = volatile.acidity),
data = wines) +
geom_jitter(position = position_jitter(width = .1), alpha = 3/4) +
facet_wrap(~quality) +
scale_colour_gradientn(colours=rainbow(4))
ggplot(aes(x = fixed.acidity, y = density, color = quality),
data = wines) +
geom_point() +
scale_colour_gradientn(colours=rainbow(4))
ggplot(aes(x = as.factor(quality), y = density),
data = wines) +
geom_boxplot()
